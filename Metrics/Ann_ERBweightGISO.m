function wERB = Ann_ERBweightGISO( f, df )
% wERB = ERBweight( f [, df ] )
%
% calculates weight factors
% for frequency-weighted integration,
% e.g. in spectral distortion measures.
%
%Usage:
% Approximate a frequency-weighted integral by a sum, as
% \int_fmin^fmax { w(f)g(f) df } \approx \sum_k { w(f_k)g(f_k) }
%
% The weight function w(f) is defined to give equal weight for
% each auditory filter band, with bandwidths defined
% by function ERBwidth(f).
% The weight factors are normalized such that
% \int_fmin^fmax{ w(f) df } == 1
%
%Input:
% f  :  row or column vector with frequency samples (Hz) to be used in summation
%       freq. samples are not necessarily, equidistant
% df :  bandwidth of input frequency samples (Hz). If not given
%       than the average of the differencees to lower and upper
%       neighbour frequencies is used.
%
%Result:
% wERB :  vector with weight factors
%
% size(wERB) == size(f) 


  if nargin < 2
    df = diff( f );
    df = [df(1); df(:); df(end)];
    idx = 1:length(f);
    df = 0.5*(df(idx) + df(idx+1));
    df = reshape(df,size(f));
  end
  %
  % ANSI S3.5-1997 Table 1
  % (zero-weighted entries added for extrapolation)
  %             cf f_low  f_up  bandimportance
  ANSI_tab1 = [  40    25    50  0.0000 ; ...
		 75    50   100  0.0000 ; ...
		 150   100   200  0.0103 ; ...
		 250   200   300  0.0261 ; ...
		 350   300   400  0.0419 ; ...
		 450   400   510  0.0577 ; ...
		 570   510   630  0.0577 ; ...
		 700   630   770  0.0577 ; ...
		 840   770   920  0.0577 ; ...
		 1000   920  1080  0.0577 ; ...
		 1170  1080  1270  0.0577 ; ...
		 1370  1270  1480  0.0577 ; ...
		 1600  1480  1720  0.0577 ; ...
		 1850  1720  2000  0.0577 ; ...
		 2150  2000  2320  0.0577 ; ...
		 2500  2320  2700  0.0577 ; ...
		 2900  2700  3150  0.0577 ; ...
		 3400  3150  3700  0.0577 ; ...
		 4000  3700  4400  0.0577 ; ...
		 4800  4400  5300  0.0460 ; ...
		 5800  5300  6400  0.0343 ; ...
		 7000  6400  7700  0.0226 ; ...
		 8500  7700  9500  0.0110 ; ...
		 10500  9500 11700  0.0000 ; ...
		 13000 11700 14400  0.0000 ; ];
  %
  % ANSI S3.5-1997 Table 2
  % (zero-weighted entries added for extrapolation)
  %             cf f_low  f_up  bandimportance
  ANSI_tab2 = [  40    25    50  0.0000 ; ...
		 75    50   100  0.0000 ; ...
		150   100   200  0.0000 ; ...
		250   200   300  0.0000 ; ...
		350   300   400  0.0588 ; ...
		450   400   510  0.0588 ; ...
		570   510   630  0.0588 ; ...
		700   630   770  0.0588 ; ...
		840   770   920  0.0588 ; ...
	       1000   920  1080  0.0588 ; ...
	       1170  1080  1270  0.0588 ; ...
	       1370  1270  1480  0.0588 ; ...
	       1600  1480  1720  0.0588 ; ...
	       1850  1720  2000  0.0588 ; ...
	       2150  2000  2320  0.0588 ; ...
	       2500  2320  2700  0.0588 ; ...
	       2900  2700  3150  0.0588 ; ...
	       3400  3150  3700  0.0588 ; ...
	       4000  3700  4400  0.0588 ; ...
	       4800  4400  5300  0.0588 ; ...
	       5800  5300  6400  0.0588 ; ...
	       7000  6400  7700  0.0000 ; ...
	       8500  7700  9500  0.0000 ; ...
	      10500  9500 11700  0.0000 ; ...
	      13000 11700 14400  0.0000 ; ];
  % use equal weights:
  ANSI_tab = ANSI_tab2;

  vCf = ANSI_tab(:,1);
  vBw = ANSI_tab(:,3) - ANSI_tab(:,2);
  vWe = ANSI_tab(:,4);

  % rescale weights to linear Hz scale,
  % interpolate to new frequency resolution 
  % and scale by external bandwidths:
  wERB = interp1( vCf, vWe ./ vBw, f, 'linear', 'extrap' ) .* df;
